// Code generated by generators/generate_errors.go. DO NOT EDIT.
// This file was generated by a tool. Modifications will be overwritten.

package raggett

import "net/http/httptest"
import "net/url"
import "net/http"
import "strings"
import "fmt"
import "testing"
import "github.com/stretchr/testify/assert"

type GeneratedRequestType struct {
	*Request
	BoolForm        bool    `form:"bool-form" blank:"false" required:"true" pattern:"^(true|false)$"`
	BoolHeader      bool    `header:"bool-header" blank:"false" required:"true" pattern:"^(true|false)$"`
	BoolQuery       bool    `query:"bool-query" blank:"false" required:"true" pattern:"^(true|false)$"`
	BoolURLParam    bool    `url-param:"bool-url-param" blank:"false" required:"true" pattern:"^(true|false)$"`
	ByteForm        byte    `form:"byte-form" blank:"false" required:"true" pattern:"^[a-f-0-9]+$"`
	ByteHeader      byte    `header:"byte-header" blank:"false" required:"true" pattern:"^[a-f-0-9]+$"`
	ByteQuery       byte    `query:"byte-query" blank:"false" required:"true" pattern:"^[a-f-0-9]+$"`
	ByteURLParam    byte    `url-param:"byte-url-param" blank:"false" required:"true" pattern:"^[a-f-0-9]+$"`
	Float32Form     float32 `form:"float32-form" blank:"false" required:"true" pattern:"^\\d+$"`
	Float32Header   float32 `header:"float32-header" blank:"false" required:"true" pattern:"^\\d+$"`
	Float32Query    float32 `query:"float32-query" blank:"false" required:"true" pattern:"^\\d+$"`
	Float32URLParam float32 `url-param:"float32-url-param" blank:"false" required:"true" pattern:"^\\d+$"`
	Float64Form     float64 `form:"float64-form" blank:"false" required:"true" pattern:"^\\d+$"`
	Float64Header   float64 `header:"float64-header" blank:"false" required:"true" pattern:"^\\d+$"`
	Float64Query    float64 `query:"float64-query" blank:"false" required:"true" pattern:"^\\d+$"`
	Float64URLParam float64 `url-param:"float64-url-param" blank:"false" required:"true" pattern:"^\\d+$"`
	IntForm         int     `form:"int-form" blank:"false" required:"true" pattern:"^\\d+$"`
	IntHeader       int     `header:"int-header" blank:"false" required:"true" pattern:"^\\d+$"`
	IntQuery        int     `query:"int-query" blank:"false" required:"true" pattern:"^\\d+$"`
	IntURLParam     int     `url-param:"int-url-param" blank:"false" required:"true" pattern:"^\\d+$"`
	Int16Form       int16   `form:"int16-form" blank:"false" required:"true" pattern:"^\\d+$"`
	Int16Header     int16   `header:"int16-header" blank:"false" required:"true" pattern:"^\\d+$"`
	Int16Query      int16   `query:"int16-query" blank:"false" required:"true" pattern:"^\\d+$"`
	Int16URLParam   int16   `url-param:"int16-url-param" blank:"false" required:"true" pattern:"^\\d+$"`
	Int32Form       int32   `form:"int32-form" blank:"false" required:"true" pattern:"^\\d+$"`
	Int32Header     int32   `header:"int32-header" blank:"false" required:"true" pattern:"^\\d+$"`
	Int32Query      int32   `query:"int32-query" blank:"false" required:"true" pattern:"^\\d+$"`
	Int32URLParam   int32   `url-param:"int32-url-param" blank:"false" required:"true" pattern:"^\\d+$"`
	Int64Form       int64   `form:"int64-form" blank:"false" required:"true" pattern:"^\\d+$"`
	Int64Header     int64   `header:"int64-header" blank:"false" required:"true" pattern:"^\\d+$"`
	Int64Query      int64   `query:"int64-query" blank:"false" required:"true" pattern:"^\\d+$"`
	Int64URLParam   int64   `url-param:"int64-url-param" blank:"false" required:"true" pattern:"^\\d+$"`
	Int8Form        int8    `form:"int8-form" blank:"false" required:"true" pattern:"^\\d+$"`
	Int8Header      int8    `header:"int8-header" blank:"false" required:"true" pattern:"^\\d+$"`
	Int8Query       int8    `query:"int8-query" blank:"false" required:"true" pattern:"^\\d+$"`
	Int8URLParam    int8    `url-param:"int8-url-param" blank:"false" required:"true" pattern:"^\\d+$"`
	StringForm      string  `form:"string-form" blank:"false" required:"true" pattern:"^string$"`
	StringHeader    string  `header:"string-header" blank:"false" required:"true" pattern:"^string$"`
	StringQuery     string  `query:"string-query" blank:"false" required:"true" pattern:"^string$"`
	StringURLParam  string  `url-param:"string-url-param" blank:"false" required:"true" pattern:"^string$"`
	UintForm        uint    `form:"uint-form" blank:"false" required:"true" pattern:"^\\d+$"`
	UintHeader      uint    `header:"uint-header" blank:"false" required:"true" pattern:"^\\d+$"`
	UintQuery       uint    `query:"uint-query" blank:"false" required:"true" pattern:"^\\d+$"`
	UintURLParam    uint    `url-param:"uint-url-param" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint16Form      uint16  `form:"uint16-form" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint16Header    uint16  `header:"uint16-header" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint16Query     uint16  `query:"uint16-query" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint16URLParam  uint16  `url-param:"uint16-url-param" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint32Form      uint32  `form:"uint32-form" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint32Header    uint32  `header:"uint32-header" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint32Query     uint32  `query:"uint32-query" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint32URLParam  uint32  `url-param:"uint32-url-param" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint64Form      uint64  `form:"uint64-form" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint64Header    uint64  `header:"uint64-header" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint64Query     uint64  `query:"uint64-query" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint64URLParam  uint64  `url-param:"uint64-url-param" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint8Form       uint8   `form:"uint8-form" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint8Header     uint8   `header:"uint8-header" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint8Query      uint8   `query:"uint8-query" blank:"false" required:"true" pattern:"^\\d+$"`
	Uint8URLParam   uint8   `url-param:"uint8-url-param" blank:"false" required:"true" pattern:"^\\d+$"`

	BoolFormArr      []bool    `form:"bool-form-arr" blank:"false" pattern:"^(true|false)$"`
	BoolHeaderArr    []bool    `header:"bool-header-arr" blank:"false" pattern:"^(true|false)$"`
	BoolQueryArr     []bool    `query:"bool-query-arr" blank:"false" pattern:"^(true|false)$"`
	ByteFormArr      []byte    `form:"byte-form-arr" blank:"false" pattern:"^[a-f-0-9]+$"`
	ByteHeaderArr    []byte    `header:"byte-header-arr" blank:"false" pattern:"^[a-f-0-9]+$"`
	ByteQueryArr     []byte    `query:"byte-query-arr" blank:"false" pattern:"^[a-f-0-9]+$"`
	Float32FormArr   []float32 `form:"float32-form-arr" blank:"false" pattern:"^\\d+$"`
	Float32HeaderArr []float32 `header:"float32-header-arr" blank:"false" pattern:"^\\d+$"`
	Float32QueryArr  []float32 `query:"float32-query-arr" blank:"false" pattern:"^\\d+$"`
	Float64FormArr   []float64 `form:"float64-form-arr" blank:"false" pattern:"^\\d+$"`
	Float64HeaderArr []float64 `header:"float64-header-arr" blank:"false" pattern:"^\\d+$"`
	Float64QueryArr  []float64 `query:"float64-query-arr" blank:"false" pattern:"^\\d+$"`
	IntFormArr       []int     `form:"int-form-arr" blank:"false" pattern:"^\\d+$"`
	IntHeaderArr     []int     `header:"int-header-arr" blank:"false" pattern:"^\\d+$"`
	IntQueryArr      []int     `query:"int-query-arr" blank:"false" pattern:"^\\d+$"`
	Int16FormArr     []int16   `form:"int16-form-arr" blank:"false" pattern:"^\\d+$"`
	Int16HeaderArr   []int16   `header:"int16-header-arr" blank:"false" pattern:"^\\d+$"`
	Int16QueryArr    []int16   `query:"int16-query-arr" blank:"false" pattern:"^\\d+$"`
	Int32FormArr     []int32   `form:"int32-form-arr" blank:"false" pattern:"^\\d+$"`
	Int32HeaderArr   []int32   `header:"int32-header-arr" blank:"false" pattern:"^\\d+$"`
	Int32QueryArr    []int32   `query:"int32-query-arr" blank:"false" pattern:"^\\d+$"`
	Int64FormArr     []int64   `form:"int64-form-arr" blank:"false" pattern:"^\\d+$"`
	Int64HeaderArr   []int64   `header:"int64-header-arr" blank:"false" pattern:"^\\d+$"`
	Int64QueryArr    []int64   `query:"int64-query-arr" blank:"false" pattern:"^\\d+$"`
	Int8FormArr      []int8    `form:"int8-form-arr" blank:"false" pattern:"^\\d+$"`
	Int8HeaderArr    []int8    `header:"int8-header-arr" blank:"false" pattern:"^\\d+$"`
	Int8QueryArr     []int8    `query:"int8-query-arr" blank:"false" pattern:"^\\d+$"`
	StringFormArr    []string  `form:"string-form-arr" blank:"false" pattern:"^string$"`
	StringHeaderArr  []string  `header:"string-header-arr" blank:"false" pattern:"^string$"`
	StringQueryArr   []string  `query:"string-query-arr" blank:"false" pattern:"^string$"`
	UintFormArr      []uint    `form:"uint-form-arr" blank:"false" pattern:"^\\d+$"`
	UintHeaderArr    []uint    `header:"uint-header-arr" blank:"false" pattern:"^\\d+$"`
	UintQueryArr     []uint    `query:"uint-query-arr" blank:"false" pattern:"^\\d+$"`
	Uint16FormArr    []uint16  `form:"uint16-form-arr" blank:"false" pattern:"^\\d+$"`
	Uint16HeaderArr  []uint16  `header:"uint16-header-arr" blank:"false" pattern:"^\\d+$"`
	Uint16QueryArr   []uint16  `query:"uint16-query-arr" blank:"false" pattern:"^\\d+$"`
	Uint32FormArr    []uint32  `form:"uint32-form-arr" blank:"false" pattern:"^\\d+$"`
	Uint32HeaderArr  []uint32  `header:"uint32-header-arr" blank:"false" pattern:"^\\d+$"`
	Uint32QueryArr   []uint32  `query:"uint32-query-arr" blank:"false" pattern:"^\\d+$"`
	Uint64FormArr    []uint64  `form:"uint64-form-arr" blank:"false" pattern:"^\\d+$"`
	Uint64HeaderArr  []uint64  `header:"uint64-header-arr" blank:"false" pattern:"^\\d+$"`
	Uint64QueryArr   []uint64  `query:"uint64-query-arr" blank:"false" pattern:"^\\d+$"`
	Uint8FormArr     []uint8   `form:"uint8-form-arr" blank:"false" pattern:"^\\d+$"`
	Uint8HeaderArr   []uint8   `header:"uint8-header-arr" blank:"false" pattern:"^\\d+$"`
	Uint8QueryArr    []uint8   `query:"uint8-query-arr" blank:"false" pattern:"^\\d+$"`
}

var integrationTestRequestFields = struct {
	form     map[string][]string
	query    map[string][]string
	header   map[string][]string
	urlParam map[string][]string
}{
	form: map[string][]string{
		"bool-form":        []string{"true"},
		"bool-form-arr":    []string{"true", "true"},
		"byte-form":        []string{"255"},
		"byte-form-arr":    []string{"255", "255"},
		"float32-form":     []string{"340282350000000000000000000000000000000"},
		"float32-form-arr": []string{"340282350000000000000000000000000000000", "340282350000000000000000000000000000000"},
		"float64-form":     []string{"179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
		"float64-form-arr": []string{},
		"int-form":         []string{"65540"},
		"int-form-arr":     []string{"65540", "65540"},
		"int16-form":       []string{"32766"},
		"int16-form-arr":   []string{"32766", "32766"},
		"int32-form":       []string{"1073741823"},
		"int32-form-arr":   []string{"1073741823", "1073741823"},
		"int64-form":       []string{"4611686018427387903"},
		"int64-form-arr":   []string{"4611686018427387903", "4611686018427387903"},
		"int8-form":        []string{"127"},
		"int8-form-arr":    []string{"127", "127"},
		"string-form":      []string{"string"},
		"string-form-arr":  []string{"string", "string"},
		"uint-form":        []string{"15"},
		"uint-form-arr":    []string{"15", "15"},
		"uint16-form":      []string{"65535"},
		"uint16-form-arr":  []string{"65535", "65535"},
		"uint32-form":      []string{"4294967295"},
		"uint32-form-arr":  []string{"4294967295", "4294967295"},
		"uint64-form":      []string{"9223372036854775808"},
		"uint64-form-arr":  []string{"9223372036854775808", "9223372036854775808"},
		"uint8-form":       []string{"128"},
		"uint8-form-arr":   []string{"128", "128"},
	},
	query: map[string][]string{
		"bool-query":        []string{"true"},
		"bool-query-arr":    []string{"true", "true"},
		"byte-query":        []string{"255"},
		"byte-query-arr":    []string{"255", "255"},
		"float32-query":     []string{"340282350000000000000000000000000000000"},
		"float32-query-arr": []string{"340282350000000000000000000000000000000", "340282350000000000000000000000000000000"},
		"float64-query":     []string{"179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
		"float64-query-arr": []string{},
		"int-query":         []string{"65540"},
		"int-query-arr":     []string{"65540", "65540"},
		"int16-query":       []string{"32766"},
		"int16-query-arr":   []string{"32766", "32766"},
		"int32-query":       []string{"1073741823"},
		"int32-query-arr":   []string{"1073741823", "1073741823"},
		"int64-query":       []string{"4611686018427387903"},
		"int64-query-arr":   []string{"4611686018427387903", "4611686018427387903"},
		"int8-query":        []string{"127"},
		"int8-query-arr":    []string{"127", "127"},
		"string-query":      []string{"string"},
		"string-query-arr":  []string{"string", "string"},
		"uint-query":        []string{"15"},
		"uint-query-arr":    []string{"15", "15"},
		"uint16-query":      []string{"65535"},
		"uint16-query-arr":  []string{"65535", "65535"},
		"uint32-query":      []string{"4294967295"},
		"uint32-query-arr":  []string{"4294967295", "4294967295"},
		"uint64-query":      []string{"9223372036854775808"},
		"uint64-query-arr":  []string{"9223372036854775808", "9223372036854775808"},
		"uint8-query":       []string{"128"},
		"uint8-query-arr":   []string{"128", "128"},
	},
	header: map[string][]string{
		"bool-header":        []string{"true"},
		"bool-header-arr":    []string{"true", "true"},
		"byte-header":        []string{"255"},
		"byte-header-arr":    []string{"255", "255"},
		"float32-header":     []string{"340282350000000000000000000000000000000"},
		"float32-header-arr": []string{"340282350000000000000000000000000000000", "340282350000000000000000000000000000000"},
		"float64-header":     []string{"179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
		"float64-header-arr": []string{"179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
		"int-header":         []string{"65540"},
		"int-header-arr":     []string{"65540", "65540"},
		"int16-header":       []string{"32766"},
		"int16-header-arr":   []string{"32766", "32766"},
		"int32-header":       []string{"1073741823"},
		"int32-header-arr":   []string{"1073741823", "1073741823"},
		"int64-header":       []string{"4611686018427387903"},
		"int64-header-arr":   []string{"4611686018427387903", "4611686018427387903"},
		"int8-header":        []string{"127"},
		"int8-header-arr":    []string{"127", "127"},
		"string-header":      []string{"string"},
		"string-header-arr":  []string{"string", "string"},
		"uint-header":        []string{"15"},
		"uint-header-arr":    []string{"15", "15"},
		"uint16-header":      []string{"65535"},
		"uint16-header-arr":  []string{"65535", "65535"},
		"uint32-header":      []string{"4294967295"},
		"uint32-header-arr":  []string{"4294967295", "4294967295"},
		"uint64-header":      []string{"9223372036854775808"},
		"uint64-header-arr":  []string{"9223372036854775808", "9223372036854775808"},
		"uint8-header":       []string{"128"},
		"uint8-header-arr":   []string{"128", "128"},
	},
	urlParam: map[string][]string{
		"bool-url-param":    []string{"true"},
		"byte-url-param":    []string{"255"},
		"float32-url-param": []string{"340282350000000000000000000000000000000"},
		"float64-url-param": []string{"179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
		"int-url-param":     []string{"65540"},
		"int16-url-param":   []string{"32766"},
		"int32-url-param":   []string{"1073741823"},
		"int64-url-param":   []string{"4611686018427387903"},
		"int8-url-param":    []string{"127"},
		"string-url-param":  []string{"string"},
		"uint-url-param":    []string{"15"},
		"uint16-url-param":  []string{"65535"},
		"uint32-url-param":  []string{"4294967295"},
		"uint64-url-param":  []string{"9223372036854775808"},
		"uint8-url-param":   []string{"128"},
	},
}

func generateIntegrationTestRequest() *http.Request {
	urlParams := []string{
		"true",
		"255",
		"340282350000000000000000000000000000000",
		"179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"65540",
		"32766",
		"1073741823",
		"4611686018427387903",
		"127",
		"string",
		"15",
		"65535",
		"4294967295",
		"9223372036854775808",
		"128",
	}
	u := url.URL{}
	u.Path = fmt.Sprintf("/test/%s", strings.Join(urlParams, "/"))
	query := url.Values{}
	query.Add("bool-query", "true")
	query.Add("bool-query-arr", "true")
	query.Add("bool-query-arr", "true")
	query.Add("byte-query", "255")
	query.Add("byte-query-arr", "255")
	query.Add("byte-query-arr", "255")
	query.Add("float32-query", "340282350000000000000000000000000000000")
	query.Add("float32-query-arr", "340282350000000000000000000000000000000")
	query.Add("float32-query-arr", "340282350000000000000000000000000000000")
	query.Add("float64-query", "179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	query.Add("float64-query-arr", "179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	query.Add("float64-query-arr", "179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	query.Add("int-query", "65540")
	query.Add("int-query-arr", "65540")
	query.Add("int-query-arr", "65540")
	query.Add("int16-query", "32766")
	query.Add("int16-query-arr", "32766")
	query.Add("int16-query-arr", "32766")
	query.Add("int32-query", "1073741823")
	query.Add("int32-query-arr", "1073741823")
	query.Add("int32-query-arr", "1073741823")
	query.Add("int64-query", "4611686018427387903")
	query.Add("int64-query-arr", "4611686018427387903")
	query.Add("int64-query-arr", "4611686018427387903")
	query.Add("int8-query", "127")
	query.Add("int8-query-arr", "127")
	query.Add("int8-query-arr", "127")
	query.Add("string-query", "string")
	query.Add("string-query-arr", "string")
	query.Add("string-query-arr", "string")
	query.Add("uint-query", "15")
	query.Add("uint-query-arr", "15")
	query.Add("uint-query-arr", "15")
	query.Add("uint16-query", "65535")
	query.Add("uint16-query-arr", "65535")
	query.Add("uint16-query-arr", "65535")
	query.Add("uint32-query", "4294967295")
	query.Add("uint32-query-arr", "4294967295")
	query.Add("uint32-query-arr", "4294967295")
	query.Add("uint64-query", "9223372036854775808")
	query.Add("uint64-query-arr", "9223372036854775808")
	query.Add("uint64-query-arr", "9223372036854775808")
	query.Add("uint8-query", "128")
	query.Add("uint8-query-arr", "128")
	query.Add("uint8-query-arr", "128")
	u.RawQuery = query.Encode()
	form := &url.Values{}
	form.Add("bool-form", "true")
	form.Add("bool-form-arr", "true")
	form.Add("bool-form-arr", "true")
	form.Add("byte-form", "255")
	form.Add("byte-form-arr", "255")
	form.Add("byte-form-arr", "255")
	form.Add("float32-form", "340282350000000000000000000000000000000")
	form.Add("float32-form-arr", "340282350000000000000000000000000000000")
	form.Add("float32-form-arr", "340282350000000000000000000000000000000")
	form.Add("float64-form", "179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	form.Add("float64-form-arr", "179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	form.Add("float64-form-arr", "179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	form.Add("int-form", "65540")
	form.Add("int-form-arr", "65540")
	form.Add("int-form-arr", "65540")
	form.Add("int16-form", "32766")
	form.Add("int16-form-arr", "32766")
	form.Add("int16-form-arr", "32766")
	form.Add("int32-form", "1073741823")
	form.Add("int32-form-arr", "1073741823")
	form.Add("int32-form-arr", "1073741823")
	form.Add("int64-form", "4611686018427387903")
	form.Add("int64-form-arr", "4611686018427387903")
	form.Add("int64-form-arr", "4611686018427387903")
	form.Add("int8-form", "127")
	form.Add("int8-form-arr", "127")
	form.Add("int8-form-arr", "127")
	form.Add("string-form", "string")
	form.Add("string-form-arr", "string")
	form.Add("string-form-arr", "string")
	form.Add("uint-form", "15")
	form.Add("uint-form-arr", "15")
	form.Add("uint-form-arr", "15")
	form.Add("uint16-form", "65535")
	form.Add("uint16-form-arr", "65535")
	form.Add("uint16-form-arr", "65535")
	form.Add("uint32-form", "4294967295")
	form.Add("uint32-form-arr", "4294967295")
	form.Add("uint32-form-arr", "4294967295")
	form.Add("uint64-form", "9223372036854775808")
	form.Add("uint64-form-arr", "9223372036854775808")
	form.Add("uint64-form-arr", "9223372036854775808")
	form.Add("uint8-form", "128")
	form.Add("uint8-form-arr", "128")
	form.Add("uint8-form-arr", "128")
	req := httptest.NewRequest("POST", u.String(), strings.NewReader(form.Encode()))
	req.Header.Add("content-type", "application/x-www-form-urlencoded")
	req.Header.Add("bool-header", "true")
	req.Header.Add("bool-header-arr", "true")
	req.Header.Add("bool-header-arr", "true")
	req.Header.Add("byte-header", "255")
	req.Header.Add("byte-header-arr", "255")
	req.Header.Add("byte-header-arr", "255")
	req.Header.Add("float32-header", "340282350000000000000000000000000000000")
	req.Header.Add("float32-header-arr", "340282350000000000000000000000000000000")
	req.Header.Add("float32-header-arr", "340282350000000000000000000000000000000")
	req.Header.Add("float64-header", "179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	req.Header.Add("float64-header-arr", "179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	req.Header.Add("float64-header-arr", "179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	req.Header.Add("int-header", "65540")
	req.Header.Add("int-header-arr", "65540")
	req.Header.Add("int-header-arr", "65540")
	req.Header.Add("int16-header", "32766")
	req.Header.Add("int16-header-arr", "32766")
	req.Header.Add("int16-header-arr", "32766")
	req.Header.Add("int32-header", "1073741823")
	req.Header.Add("int32-header-arr", "1073741823")
	req.Header.Add("int32-header-arr", "1073741823")
	req.Header.Add("int64-header", "4611686018427387903")
	req.Header.Add("int64-header-arr", "4611686018427387903")
	req.Header.Add("int64-header-arr", "4611686018427387903")
	req.Header.Add("int8-header", "127")
	req.Header.Add("int8-header-arr", "127")
	req.Header.Add("int8-header-arr", "127")
	req.Header.Add("string-header", "string")
	req.Header.Add("string-header-arr", "string")
	req.Header.Add("string-header-arr", "string")
	req.Header.Add("uint-header", "15")
	req.Header.Add("uint-header-arr", "15")
	req.Header.Add("uint-header-arr", "15")
	req.Header.Add("uint16-header", "65535")
	req.Header.Add("uint16-header-arr", "65535")
	req.Header.Add("uint16-header-arr", "65535")
	req.Header.Add("uint32-header", "4294967295")
	req.Header.Add("uint32-header-arr", "4294967295")
	req.Header.Add("uint32-header-arr", "4294967295")
	req.Header.Add("uint64-header", "9223372036854775808")
	req.Header.Add("uint64-header-arr", "9223372036854775808")
	req.Header.Add("uint64-header-arr", "9223372036854775808")
	req.Header.Add("uint8-header", "128")
	req.Header.Add("uint8-header-arr", "128")
	req.Header.Add("uint8-header-arr", "128")
	return req
}
func assertIntegrationRequestData(t *testing.T, r *GeneratedRequestType) {
	t.Run(`Received bool-form equals true`, func(t *testing.T) {
		assert.Equal(t, bool(true), r.BoolForm)
	})
	t.Run(`Received bool-form-arr equals true`, func(t *testing.T) {
		assert.Equal(t, []bool{true, true}, r.BoolFormArr)
	})
	t.Run(`Received bool-header equals true`, func(t *testing.T) {
		assert.Equal(t, bool(true), r.BoolHeader)
	})
	t.Run(`Received bool-header-arr equals true`, func(t *testing.T) {
		assert.Equal(t, []bool{true, true}, r.BoolHeaderArr)
	})
	t.Run(`Received bool-query equals true`, func(t *testing.T) {
		assert.Equal(t, bool(true), r.BoolQuery)
	})
	t.Run(`Received bool-query-arr equals true`, func(t *testing.T) {
		assert.Equal(t, []bool{true, true}, r.BoolQueryArr)
	})
	t.Run(`Received bool-url-param equals true`, func(t *testing.T) {
		assert.Equal(t, bool(true), r.BoolURLParam)
	})
	t.Run(`Received byte-form equals 255`, func(t *testing.T) {
		assert.Equal(t, byte(255), r.ByteForm)
	})
	t.Run(`Received byte-form-arr equals 255`, func(t *testing.T) {
		assert.Equal(t, []byte{255, 255}, r.ByteFormArr)
	})
	t.Run(`Received byte-header equals 255`, func(t *testing.T) {
		assert.Equal(t, byte(255), r.ByteHeader)
	})
	t.Run(`Received byte-header-arr equals 255`, func(t *testing.T) {
		assert.Equal(t, []byte{255, 255}, r.ByteHeaderArr)
	})
	t.Run(`Received byte-query equals 255`, func(t *testing.T) {
		assert.Equal(t, byte(255), r.ByteQuery)
	})
	t.Run(`Received byte-query-arr equals 255`, func(t *testing.T) {
		assert.Equal(t, []byte{255, 255}, r.ByteQueryArr)
	})
	t.Run(`Received byte-url-param equals 255`, func(t *testing.T) {
		assert.Equal(t, byte(255), r.ByteURLParam)
	})
	t.Run(`Received float32-form equals 340282350000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, float32(340282350000000000000000000000000000000), r.Float32Form)
	})
	t.Run(`Received float32-form-arr equals 340282350000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, []float32{340282350000000000000000000000000000000, 340282350000000000000000000000000000000}, r.Float32FormArr)
	})
	t.Run(`Received float32-header equals 340282350000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, float32(340282350000000000000000000000000000000), r.Float32Header)
	})
	t.Run(`Received float32-header-arr equals 340282350000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, []float32{340282350000000000000000000000000000000, 340282350000000000000000000000000000000}, r.Float32HeaderArr)
	})
	t.Run(`Received float32-query equals 340282350000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, float32(340282350000000000000000000000000000000), r.Float32Query)
	})
	t.Run(`Received float32-query-arr equals 340282350000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, []float32{340282350000000000000000000000000000000, 340282350000000000000000000000000000000}, r.Float32QueryArr)
	})
	t.Run(`Received float32-url-param equals 340282350000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, float32(340282350000000000000000000000000000000), r.Float32URLParam)
	})
	t.Run(`Received float64-form equals 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, float64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), r.Float64Form)
	})
	t.Run(`Received float64-form-arr equals 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, []float64{179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000}, r.Float64FormArr)
	})
	t.Run(`Received float64-header equals 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, float64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), r.Float64Header)
	})
	t.Run(`Received float64-header-arr equals 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, []float64{179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000}, r.Float64HeaderArr)
	})
	t.Run(`Received float64-query equals 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, float64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), r.Float64Query)
	})
	t.Run(`Received float64-query-arr equals 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, []float64{179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000}, r.Float64QueryArr)
	})
	t.Run(`Received float64-url-param equals 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`, func(t *testing.T) {
		assert.Equal(t, float64(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), r.Float64URLParam)
	})
	t.Run(`Received int-form equals 65540`, func(t *testing.T) {
		assert.Equal(t, int(65540), r.IntForm)
	})
	t.Run(`Received int-form-arr equals 65540`, func(t *testing.T) {
		assert.Equal(t, []int{65540, 65540}, r.IntFormArr)
	})
	t.Run(`Received int-header equals 65540`, func(t *testing.T) {
		assert.Equal(t, int(65540), r.IntHeader)
	})
	t.Run(`Received int-header-arr equals 65540`, func(t *testing.T) {
		assert.Equal(t, []int{65540, 65540}, r.IntHeaderArr)
	})
	t.Run(`Received int-query equals 65540`, func(t *testing.T) {
		assert.Equal(t, int(65540), r.IntQuery)
	})
	t.Run(`Received int-query-arr equals 65540`, func(t *testing.T) {
		assert.Equal(t, []int{65540, 65540}, r.IntQueryArr)
	})
	t.Run(`Received int-url-param equals 65540`, func(t *testing.T) {
		assert.Equal(t, int(65540), r.IntURLParam)
	})
	t.Run(`Received int16-form equals 32766`, func(t *testing.T) {
		assert.Equal(t, int16(32766), r.Int16Form)
	})
	t.Run(`Received int16-form-arr equals 32766`, func(t *testing.T) {
		assert.Equal(t, []int16{32766, 32766}, r.Int16FormArr)
	})
	t.Run(`Received int16-header equals 32766`, func(t *testing.T) {
		assert.Equal(t, int16(32766), r.Int16Header)
	})
	t.Run(`Received int16-header-arr equals 32766`, func(t *testing.T) {
		assert.Equal(t, []int16{32766, 32766}, r.Int16HeaderArr)
	})
	t.Run(`Received int16-query equals 32766`, func(t *testing.T) {
		assert.Equal(t, int16(32766), r.Int16Query)
	})
	t.Run(`Received int16-query-arr equals 32766`, func(t *testing.T) {
		assert.Equal(t, []int16{32766, 32766}, r.Int16QueryArr)
	})
	t.Run(`Received int16-url-param equals 32766`, func(t *testing.T) {
		assert.Equal(t, int16(32766), r.Int16URLParam)
	})
	t.Run(`Received int32-form equals 1073741823`, func(t *testing.T) {
		assert.Equal(t, int32(1073741823), r.Int32Form)
	})
	t.Run(`Received int32-form-arr equals 1073741823`, func(t *testing.T) {
		assert.Equal(t, []int32{1073741823, 1073741823}, r.Int32FormArr)
	})
	t.Run(`Received int32-header equals 1073741823`, func(t *testing.T) {
		assert.Equal(t, int32(1073741823), r.Int32Header)
	})
	t.Run(`Received int32-header-arr equals 1073741823`, func(t *testing.T) {
		assert.Equal(t, []int32{1073741823, 1073741823}, r.Int32HeaderArr)
	})
	t.Run(`Received int32-query equals 1073741823`, func(t *testing.T) {
		assert.Equal(t, int32(1073741823), r.Int32Query)
	})
	t.Run(`Received int32-query-arr equals 1073741823`, func(t *testing.T) {
		assert.Equal(t, []int32{1073741823, 1073741823}, r.Int32QueryArr)
	})
	t.Run(`Received int32-url-param equals 1073741823`, func(t *testing.T) {
		assert.Equal(t, int32(1073741823), r.Int32URLParam)
	})
	t.Run(`Received int64-form equals 4611686018427387903`, func(t *testing.T) {
		assert.Equal(t, int64(4611686018427387903), r.Int64Form)
	})
	t.Run(`Received int64-form-arr equals 4611686018427387903`, func(t *testing.T) {
		assert.Equal(t, []int64{4611686018427387903, 4611686018427387903}, r.Int64FormArr)
	})
	t.Run(`Received int64-header equals 4611686018427387903`, func(t *testing.T) {
		assert.Equal(t, int64(4611686018427387903), r.Int64Header)
	})
	t.Run(`Received int64-header-arr equals 4611686018427387903`, func(t *testing.T) {
		assert.Equal(t, []int64{4611686018427387903, 4611686018427387903}, r.Int64HeaderArr)
	})
	t.Run(`Received int64-query equals 4611686018427387903`, func(t *testing.T) {
		assert.Equal(t, int64(4611686018427387903), r.Int64Query)
	})
	t.Run(`Received int64-query-arr equals 4611686018427387903`, func(t *testing.T) {
		assert.Equal(t, []int64{4611686018427387903, 4611686018427387903}, r.Int64QueryArr)
	})
	t.Run(`Received int64-url-param equals 4611686018427387903`, func(t *testing.T) {
		assert.Equal(t, int64(4611686018427387903), r.Int64URLParam)
	})
	t.Run(`Received int8-form equals 127`, func(t *testing.T) {
		assert.Equal(t, int8(127), r.Int8Form)
	})
	t.Run(`Received int8-form-arr equals 127`, func(t *testing.T) {
		assert.Equal(t, []int8{127, 127}, r.Int8FormArr)
	})
	t.Run(`Received int8-header equals 127`, func(t *testing.T) {
		assert.Equal(t, int8(127), r.Int8Header)
	})
	t.Run(`Received int8-header-arr equals 127`, func(t *testing.T) {
		assert.Equal(t, []int8{127, 127}, r.Int8HeaderArr)
	})
	t.Run(`Received int8-query equals 127`, func(t *testing.T) {
		assert.Equal(t, int8(127), r.Int8Query)
	})
	t.Run(`Received int8-query-arr equals 127`, func(t *testing.T) {
		assert.Equal(t, []int8{127, 127}, r.Int8QueryArr)
	})
	t.Run(`Received int8-url-param equals 127`, func(t *testing.T) {
		assert.Equal(t, int8(127), r.Int8URLParam)
	})
	t.Run(`Received string-form equals "string"`, func(t *testing.T) {
		assert.Equal(t, string("string"), r.StringForm)
	})
	t.Run(`Received string-form-arr equals "string"`, func(t *testing.T) {
		assert.Equal(t, []string{"string", "string"}, r.StringFormArr)
	})
	t.Run(`Received string-header equals "string"`, func(t *testing.T) {
		assert.Equal(t, string("string"), r.StringHeader)
	})
	t.Run(`Received string-header-arr equals "string"`, func(t *testing.T) {
		assert.Equal(t, []string{"string", "string"}, r.StringHeaderArr)
	})
	t.Run(`Received string-query equals "string"`, func(t *testing.T) {
		assert.Equal(t, string("string"), r.StringQuery)
	})
	t.Run(`Received string-query-arr equals "string"`, func(t *testing.T) {
		assert.Equal(t, []string{"string", "string"}, r.StringQueryArr)
	})
	t.Run(`Received string-url-param equals "string"`, func(t *testing.T) {
		assert.Equal(t, string("string"), r.StringURLParam)
	})
	t.Run(`Received uint-form equals 15`, func(t *testing.T) {
		assert.Equal(t, uint(15), r.UintForm)
	})
	t.Run(`Received uint-form-arr equals 15`, func(t *testing.T) {
		assert.Equal(t, []uint{15, 15}, r.UintFormArr)
	})
	t.Run(`Received uint-header equals 15`, func(t *testing.T) {
		assert.Equal(t, uint(15), r.UintHeader)
	})
	t.Run(`Received uint-header-arr equals 15`, func(t *testing.T) {
		assert.Equal(t, []uint{15, 15}, r.UintHeaderArr)
	})
	t.Run(`Received uint-query equals 15`, func(t *testing.T) {
		assert.Equal(t, uint(15), r.UintQuery)
	})
	t.Run(`Received uint-query-arr equals 15`, func(t *testing.T) {
		assert.Equal(t, []uint{15, 15}, r.UintQueryArr)
	})
	t.Run(`Received uint-url-param equals 15`, func(t *testing.T) {
		assert.Equal(t, uint(15), r.UintURLParam)
	})
	t.Run(`Received uint16-form equals 65535`, func(t *testing.T) {
		assert.Equal(t, uint16(65535), r.Uint16Form)
	})
	t.Run(`Received uint16-form-arr equals 65535`, func(t *testing.T) {
		assert.Equal(t, []uint16{65535, 65535}, r.Uint16FormArr)
	})
	t.Run(`Received uint16-header equals 65535`, func(t *testing.T) {
		assert.Equal(t, uint16(65535), r.Uint16Header)
	})
	t.Run(`Received uint16-header-arr equals 65535`, func(t *testing.T) {
		assert.Equal(t, []uint16{65535, 65535}, r.Uint16HeaderArr)
	})
	t.Run(`Received uint16-query equals 65535`, func(t *testing.T) {
		assert.Equal(t, uint16(65535), r.Uint16Query)
	})
	t.Run(`Received uint16-query-arr equals 65535`, func(t *testing.T) {
		assert.Equal(t, []uint16{65535, 65535}, r.Uint16QueryArr)
	})
	t.Run(`Received uint16-url-param equals 65535`, func(t *testing.T) {
		assert.Equal(t, uint16(65535), r.Uint16URLParam)
	})
	t.Run(`Received uint32-form equals 4294967295`, func(t *testing.T) {
		assert.Equal(t, uint32(4294967295), r.Uint32Form)
	})
	t.Run(`Received uint32-form-arr equals 4294967295`, func(t *testing.T) {
		assert.Equal(t, []uint32{4294967295, 4294967295}, r.Uint32FormArr)
	})
	t.Run(`Received uint32-header equals 4294967295`, func(t *testing.T) {
		assert.Equal(t, uint32(4294967295), r.Uint32Header)
	})
	t.Run(`Received uint32-header-arr equals 4294967295`, func(t *testing.T) {
		assert.Equal(t, []uint32{4294967295, 4294967295}, r.Uint32HeaderArr)
	})
	t.Run(`Received uint32-query equals 4294967295`, func(t *testing.T) {
		assert.Equal(t, uint32(4294967295), r.Uint32Query)
	})
	t.Run(`Received uint32-query-arr equals 4294967295`, func(t *testing.T) {
		assert.Equal(t, []uint32{4294967295, 4294967295}, r.Uint32QueryArr)
	})
	t.Run(`Received uint32-url-param equals 4294967295`, func(t *testing.T) {
		assert.Equal(t, uint32(4294967295), r.Uint32URLParam)
	})
	t.Run(`Received uint64-form equals 9223372036854775808`, func(t *testing.T) {
		assert.Equal(t, uint64(9223372036854775808), r.Uint64Form)
	})
	t.Run(`Received uint64-form-arr equals 9223372036854775808`, func(t *testing.T) {
		assert.Equal(t, []uint64{9223372036854775808, 9223372036854775808}, r.Uint64FormArr)
	})
	t.Run(`Received uint64-header equals 9223372036854775808`, func(t *testing.T) {
		assert.Equal(t, uint64(9223372036854775808), r.Uint64Header)
	})
	t.Run(`Received uint64-header-arr equals 9223372036854775808`, func(t *testing.T) {
		assert.Equal(t, []uint64{9223372036854775808, 9223372036854775808}, r.Uint64HeaderArr)
	})
	t.Run(`Received uint64-query equals 9223372036854775808`, func(t *testing.T) {
		assert.Equal(t, uint64(9223372036854775808), r.Uint64Query)
	})
	t.Run(`Received uint64-query-arr equals 9223372036854775808`, func(t *testing.T) {
		assert.Equal(t, []uint64{9223372036854775808, 9223372036854775808}, r.Uint64QueryArr)
	})
	t.Run(`Received uint64-url-param equals 9223372036854775808`, func(t *testing.T) {
		assert.Equal(t, uint64(9223372036854775808), r.Uint64URLParam)
	})
	t.Run(`Received uint8-form equals 128`, func(t *testing.T) {
		assert.Equal(t, uint8(128), r.Uint8Form)
	})
	t.Run(`Received uint8-form-arr equals 128`, func(t *testing.T) {
		assert.Equal(t, []uint8{128, 128}, r.Uint8FormArr)
	})
	t.Run(`Received uint8-header equals 128`, func(t *testing.T) {
		assert.Equal(t, uint8(128), r.Uint8Header)
	})
	t.Run(`Received uint8-header-arr equals 128`, func(t *testing.T) {
		assert.Equal(t, []uint8{128, 128}, r.Uint8HeaderArr)
	})
	t.Run(`Received uint8-query equals 128`, func(t *testing.T) {
		assert.Equal(t, uint8(128), r.Uint8Query)
	})
	t.Run(`Received uint8-query-arr equals 128`, func(t *testing.T) {
		assert.Equal(t, []uint8{128, 128}, r.Uint8QueryArr)
	})
	t.Run(`Received uint8-url-param equals 128`, func(t *testing.T) {
		assert.Equal(t, uint8(128), r.Uint8URLParam)
	})
}

var integrationTestURLPattern = "/test/{bool-url-param}/{byte-url-param}/{float32-url-param}/{float64-url-param}/{int-url-param}/{int16-url-param}/{int32-url-param}/{int64-url-param}/{int8-url-param}/{string-url-param}/{uint-url-param}/{uint16-url-param}/{uint32-url-param}/{uint64-url-param}/{uint8-url-param}"
